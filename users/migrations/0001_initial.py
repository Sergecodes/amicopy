# Generated by Django 3.2.12 on 2022-03-12 13:49

import core.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import users.models.managers
import users.models.operations
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('transactions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Your username should be not more than 50 characters and may contain only letters, numbers, hyphens, and underscores; no other characters are allowed.', max_length=50, unique=True, validators=[users.validators.UsernameValidator()], verbose_name='username')),
                ('email', core.fields.ProperEmailField(help_text='We will send a verification code to this email', max_length=50, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=False)),
                ('joined_on', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('deactivated_on', models.DateTimeField(blank=True, editable=False, null=True)),
                ('bookmarked_transactions', models.ManyToManyField(blank=True, related_name='bookmarkers', related_query_name='bookmarker', through='transactions.TransactionBookmark', to='transactions.Transaction')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='users', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('pinned_session', models.OneToOneField(blank=True, db_column='pinned_session_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='transactions.session')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='users', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users"."user',
            },
            bases=(models.Model, users.models.operations.UserOperations),
            managers=[
                ('objects', users.models.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_settings', models.JSONField(default=dict)),
                ('site_settings', models.JSONField(default=dict)),
                ('email_settings', models.JSONField(default=dict)),
                ('user', models.OneToOneField(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='settings', related_query_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'settings',
                'verbose_name_plural': 'settings',
                'db_table': 'users"."settings',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_superuser'], name='user_is_superuser_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_staff'], name='user_is_staff_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='user_is_active_idx'),
        ),
    ]
