** POSTGRESQL v 14**

1. Create database user/role
CREATE ROLE `rolename` LOGIN SUPERUSER PASSWORD 'password_string';
CREATE DATABASE `db_name` OWNER `db_owner`;
# CREATE DATABASE amicopy_db OWNER sergeman;


2. Create schemas
CREATE SCHEMA `schema_name` AUTHORIZATION `rolename`;
GRANT ALL ON  SCHEMA `schema_name` TO `rolename`;
("\dn+" to view schema access privileges")
(ALTER SCHEMA `schema_name` OWNER TO `rolename`  to change owner of a schema)
"""
CREATE SCHEMA django AUTHORIZATION sergeman;
GRANT ALL ON  SCHEMA django TO sergeman;
CREATE SCHEMA transactions AUTHORIZATION sergeman;
GRANT ALL ON  SCHEMA transactions TO sergeman;
CREATE SCHEMA users AUTHORIZATION sergeman;
GRANT ALL ON  SCHEMA users TO sergeman;
CREATE SCHEMA notifications AUTHORIZATION sergeman;
GRANT ALL ON  SCHEMA notifications TO sergeman;
CREATE SCHEMA subscriptions AUTHORIZATION sergeman;
GRANT ALL ON  SCHEMA subscriptions TO sergeman;
"""

3. Set search_path for tables
SET search_path TO `schema1`,`schema2`;
# SET search_path TO django,transactions,users,notifications,subscriptions,public;


4. Trigger on transactions.device to ensure both browser_session_id and user_id can't be null.
CREATE OR REPLACE FUNCTION check_device_owner() RETURNS trigger AS $check_device_owner$
    BEGIN 
        IF NEW.browser_session_id = '' AND NEW.user_id IS NULL THEN
            RAISE EXCEPTION 'Both browser_session_id and user_id can''t be unset';
        END IF;
        RETURN NEW;
    END;
    $check_device_owner$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER check_device_owner BEFORE INSERT OR UPDATE ON transactions.device
    FOR EACH ROW EXECUTE FUNCTION check_device_owner();
